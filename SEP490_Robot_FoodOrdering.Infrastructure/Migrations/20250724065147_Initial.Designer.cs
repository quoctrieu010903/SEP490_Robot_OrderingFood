// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SEP490_Robot_FoodOrdering.Infrastructure.Data.Persistence;

#nullable disable

namespace SEP490_Robot_FoodOrdering.Infrastructure.Migrations
{
    [DbContext(typeof(RobotFoodOrderingDBContext))]

    [Migration("20250724070145_initialDatabase")]
    partial class initialDatabase {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4fd8cfa-051b-43d3-915f-518617b3035f"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(2348),
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(2349),
                            Name = "Beverages"
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("paymentMethod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItemTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderItemId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("OrderItemId1");

                    b.HasIndex("ToppingId");

                    b.ToTable("OrderItemToppings");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationTime")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1864dc3-e6b3-4f06-b04e-8b4fb5833062"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(6635),
                            Description = "Refreshing soft drink",
                            DurationTime = 1,
                            ImageUrl = "cocacola.jpg",
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(6636),
                            Name = "Coca Cola"
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894f7654-f7b4-4f74-bfe6-6b502d3201b2"),
                            CategoryId = new Guid("b4fd8cfa-051b-43d3-915f-518617b3035f"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(6871),
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(6871),
                            ProductId = new Guid("a1864dc3-e6b3-4f06-b04e-8b4fb5833062")
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("SizeName")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6647c49-6a04-4323-b0a2-8cdec3f6614d"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(7831),
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(7831),
                            Price = 1.99m,
                            ProductId = new Guid("a1864dc3-e6b3-4f06-b04e-8b4fb5833062"),
                            SizeName = 2
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.ProductTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ToppingId");

                    b.ToTable("ProductToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97bcf6a6-3474-40b2-ac9c-360aa4bb3e6d"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(8520),
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(8521),
                            ProductId = new Guid("a1864dc3-e6b3-4f06-b04e-8b4fb5833062"),
                            ToppingId = new Guid("18ffc532-d26d-4e99-9698-29d0ee11f968")
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d334b7d3-d6fc-4f87-bb73-79550ab3542e"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(9541),
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(9542),
                            Name = new Guid("d334b7d3-d6fc-4f87-bb73-79550ab3542e"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18ffc532-d26d-4e99-9698-29d0ee11f968"),
                            CreatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(8142),
                            LastUpdatedTime = new DateTime(2025, 7, 24, 6, 51, 46, 78, DateTimeKind.Utc).AddTicks(8143),
                            Name = "Ice",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Order", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItemTopping", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItem", null)
                        .WithMany("OrderItemTopping")
                        .HasForeignKey("OrderItemId1");

                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Payment", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("SEP490_Robot_FoodOrdering.Domain.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.ProductSize", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Product", "Product")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.ProductTopping", b =>
                {
                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Product", "Product")
                        .WithMany("AvailableToppings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SEP490_Robot_FoodOrdering.Domain.Entities.Topping", "Topping")
                        .WithMany("ProductToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.OrderItem", b =>
                {
                    b.Navigation("OrderItemTopping");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Product", b =>
                {
                    b.Navigation("AvailableToppings");

                    b.Navigation("ProductCategories");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SEP490_Robot_FoodOrdering.Domain.Entities.Topping", b =>
                {
                    b.Navigation("ProductToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
